name: AlphaClientServer.CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO}}
  CLUSTER_NAME: "AlphaClientServer-aks"
  CLUSTER_RESOURCE_GROUP: "AlphaClientServer-RG"
  REGISTRY_NAME: "AlphaClientServeracr"
  APP_NAME: "AlphaClientSerrver"
  NAMESPACE: "AlphaServerNS"
  SECRET: "AlphaServerSecret"

jobs: 
  build_go:
    name: Build the Go App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install and Setup the Go Environment
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.x
          cache: true

      - name: Install the Go dependencies
        run: |
          go mod download
      - name: Copy the Source Files
        run: |
          cp ./src/* .

      - name: Build the packages
        run: go build -v ./...

  build_tf:
    name: Build the Terraform Configuration Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install and Setup the Terraform Environment
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          terraform_wrapper: false

      - name: Terraform Init and Validate
        run: |
          cd ./TF
          terraform init
          terraform validate
  
  deploy_tf:
    name: Deploy the Kubernetes Cluster
    runs-on: ubuntu-latest
    # needs: [build_docker]
    steps:
      - 
        uses: actions/checkout@v3
      - 
        name: Install and Setup the Terraform Environment
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          terraform_wrapper: false
      - 
        name: Terraform Plan and Apply
        run: |
          cd ./TF
          terraform init
          terraform plan
          terraform apply --auto-approve

  deploy_aks:
    name: Build and Deploy to AKS
    runs-on: ubuntu-latest
    needs: [deploy_tf]
    steps:
      - uses: actions/checkout@main
      - 
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }} 
          password: ${{ secrets.ACR_PASSWORD }}
      - 
        run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        working-directory: .
      - 
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - 
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f 
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.ACR_USERNAME }}
          container-registry-password: ${{ secrets.ACR_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/k8s/deployment.yaml
            ${{ github.workspace }}/k8s/service.yaml
          images: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
  # build_docker:
  #   name: Build and Push the Docker Image
  #   needs: [build_go, build_tf]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         builder: ${{ steps.buildx.outputs.name }}
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/alphaserver:latest
  #         cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/alphaserver:buildcache
  #         cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/alphaserver:buildcache,mode=max
  #     - uses: azure/aks-set-context@v1
  #       with:
  #         creds: '${{ secrets.CREDENTIALS }}'
  #         cluster-name: ${{ env.CLUSTER_NAME }}
  #         resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
  #     - 
  #       uses: azure/k8s-deploy@v1
  #       with:
  #         manifests: |
  #           ${{ github.workspace }}/k8s/deployment.yml
  #           ${{ github.workspace }}/k8s/service.yml
  #         images: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/alphaserver:latest
  #         namespace: ${{ env.CLUSTER_NAME }}
  
  # deploy_kube:
  #   name: Deploy the manifest to the Kubernetes
  #   runs-on: ubuntu-latest
  #   needs: [deploy_tf]
  #   steps:
  #     - 
  #       uses: azure/k8s-deploy@v1
  #       with:
  #         manifests: |
  #           ${{ github.workspace }}/k8s/deployment.yml
  #           ${{ github.workspace }}/k8s/service.yml
  #         images: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/alphaserver:latest
  #         imagepullsecrets: |
  #           ${{ env.SECRET }}
  #         namespace: AlphaClientServer-aks